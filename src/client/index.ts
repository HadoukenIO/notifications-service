/**
 * @module Index
 */

import {tryServiceDispatch, eventEmitter} from './connection';
import {APITopic} from './internal';
import {NotificationOptions, Notification, NotificationClickedEvent, NotificationClosedEvent, NotificationButtonClickedEvent} from './Notification';
import {NotificationEvent} from './Notification';

export function addEventListener(eventType: 'notification-clicked', listener: (event: NotificationClickedEvent) => void): void;
export function addEventListener(eventType: 'notification-closed', listener: (event: NotificationClosedEvent) => void): void;
export function addEventListener(eventType: 'notification-button-clicked', listener: (event: NotificationButtonClickedEvent) => void): void;
export function addEventListener<E extends NotificationEvent>(eventType: E['type'], listener: (event: E) => void): void {
    if (typeof fin === 'undefined') {
        throw new Error('fin is not defined. The openfin-notifications module is only intended for use in an OpenFin application.');
    }

    eventEmitter.addListener(eventType, listener);
}

export function removeEventListener(eventType: 'notification-clicked', listener: (event: NotificationClickedEvent) => void): void;
export function removeEventListener(eventType: 'notification-closed', listener: (event: NotificationClosedEvent) => void): void;
export function removeEventListener(eventType: 'notification-button-clicked', listener: (event: NotificationButtonClickedEvent) => void): void;
export function removeEventListener<E extends NotificationEvent>(eventType: E['type'], listener: (event: E) => void): void {
    if (typeof fin === 'undefined') {
        throw new Error('fin is not defined. The openfin-notifications module is only intended for use in an OpenFin application.');
    }

    eventEmitter.removeListener(eventType, listener);
}

/**
 * Creates a new Notification.
 *
 * The Notification will appear in the Notification Center or as a toast if the Center is not visible.
 *
 * ```ts
 * import {create} from 'openfin-notifications';
 *
 * create({
 *      id: "uniqueNotificationId",
 *      body: "I'm the Notification body text",
 *      icon: "https://openfin.co/favicon.ico"
 * });
 * ```
 *
 * @param options Notification configuration options.
 */
export async function create(options: NotificationOptions): Promise<Notification> {
    // Should have some sort of input validation here...
    return tryServiceDispatch(APITopic.CREATE_NOTIFICATION, options);
}

/**
 * Clears a specific Notification from the Notification Center.
 *
 * ```ts
 * import {clear} from 'openfin-notifications';
 *
 * clear("uniqueNotificationId");
 * ```
 *
 * @param id ID of the Notification to clear.
 */
export async function clear(id: string): Promise<boolean> {
    // Should have some sort of input validation here...
    return tryServiceDispatch(APITopic.CLEAR_NOTIFICATION, {id});
}

/**
 * Retrieves all Notifications which were generated by your applications uuid.
 *
 * ```ts
 * import {getAll} from 'openfin-notifications'
 *
 * getAll()
 *  .then(console.log);
 * ```
 */
export async function getAll(): Promise<Notification[]>{
    // Should have some sort of input validation here...
    return tryServiceDispatch(APITopic.GET_APP_NOTIFICATIONS, undefined);
}

/**
 * Clears all Notifications which were generated by your applications uuid.
 *
 * ```ts
 * import {clearAll} from 'openfin-notifications';
 *
 * clearAll();
 * ```
 */
export async function clearAll(): Promise<number> {
    // Should have some sort of input validation here...
    return tryServiceDispatch(APITopic.CLEAR_APP_NOTIFICATIONS, undefined);
}

/**
 * Toggles the visibility of the Notification Center.
 *
 * ```ts
 * import {toggleNotificationCenter} from 'openfin-notifications';
 *
 * toggleNotificationCenter();
 * ```
 */
export async function toggleNotificationCenter(): Promise<void> {
    return tryServiceDispatch(APITopic.TOGGLE_NOTIFICATION_CENTER, undefined);
}
